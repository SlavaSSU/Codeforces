/*
problem link = "http://codeforces.com/contest/724/problem/B"
*/

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>

//#include <cstdint>
#include <cstdlib>
#include <cassert>
#include <cctype>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-11;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 1 && x <= n && y >= 1 && y <= m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int N = 22;

int n, m, a[N][N];

inline void gen() {
	return;
}

inline bool read() {
	if (!(cin >> n >> m)) return false;
	forn(i, n) forn(j, m) assert(cin >> a[i][j]);
	return true;
}

int b[N][N];

inline void solve() {
	forn(i, n) forn(j, m) b[i][j] = a[i][j];
	forn(j1, m) for (int j2 = j1; j2 < m; j2++) {
		forn(i, n) forn(j, m) a[i][j] = b[i][j];
		forn(i, n) {
			int x1 = a[i][j1], x2 = a[i][j2];
			a[i][j1] = x2;
			a[i][j2] = x1;
		}
		
		/*
		cerr << "j1 j2 == " << j1 << ' ' << j2 << endl;
		forn(i, n) {
			forn(j, m) cerr << a[i][j] << ' ';
			cerr << endl;
		}
		*/

		forn(i, n) {
			bool has = false;
			forn(j, m) for (int k = j + 1; k < m; k++) {
				if (has) break;
				swap(a[i][j], a[i][k]);
				bool sorted = true;
				forn(l, m - 1) if (a[i][l] > a[i][l + 1]) sorted = false;
				if (sorted) {
					has = true;
					break;
				}

				swap(a[i][j], a[i][k]);
			}
		}

		bool ok = true;
		forn(i, n) {
			forn(j, m - 1) if (a[i][j] > a[i][j + 1]) ok = false;
		}

		if (ok) {
			puts("YES");
			return;
		}
	}

	puts("NO");
	return;
}

int main() {
#ifdef _DEBUG
	//assert(freopen("input.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));

	int nTests = 1;
	//assert(cin >> nTests);
	//#define MULTITEST
#ifdef MULTITEST
	assert(scanf("%d", &nTests) == 1);
#endif

	forn(i, nTests) {
		assert(read());
		solve();
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}
