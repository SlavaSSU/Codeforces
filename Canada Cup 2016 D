#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>

//#include <cstdint>
#include <cstdlib>
#include <cassert>
#include <cctype>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-11;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int N = int(3e5) + 555;

int n;
pair<pair<li, li>, int> a[N];

inline void gen() {
	return;
}

inline bool read() {
	if (scanf("%d", &n) != 1) return false;
	forn(i, n) {
		assert(scanf("%I64d %I64d", &a[i].x.x, &a[i].x.y) == 2);
		a[i].y = i;
	}
	return true;
}

inline void solve() {
	sort(a + 1, a + n);
	int upper = 0;
	int ptr = n - 1;
	li myT = a[0].x.x;
	li myW = a[0].x.y;
	multiset<li> s;
	while (ptr >= 1 && a[ptr].x.x > myT) {
		upper++;
		s.insert(a[ptr].x.y - a[ptr].x.x + 1);
		ptr--;
	}

	int ans = upper + 1;
	cerr << "initans == " << ans << endl;
	while (1) {
		if (s.empty()) break;
		li mn = *s.begin();
		li can = myT;
		if (mn > can) break;
		myT -= mn;
		s.erase(s.begin());
		upper--;
		while (ptr >= 1 && a[ptr].x.x > myT) {
			upper++;
			s.insert(a[ptr].x.y - a[ptr].x.x + 1);
			ptr--;
		}

		ans = min(ans, upper + 1);
	}

	printf("%d\n", ans);
	return;
}

int main() {
#ifdef _DEBUG
	assert(freopen("input.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));

	int T = 1;
//#define MULTITEST
#ifdef MULTITEST
	assert(scanf("%d", &T) == 1);
#endif

	forn(i, T) {
#ifdef _DEBUG
		cerr << "TEST == " << i << endl;
#endif
		assert(read());
		solve();
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}
